trigger:
  batch: true
  branches:
    include:
    - master
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Benchmarks/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/run-benchmarks.yaml'
    - 'Resources/Utilities/CreateLoopbackPort/*'
    - 'Resources/Scripts/Setup MIDI ports.ps1'

pr:
  branches:
    include:
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Benchmarks/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/run-benchmarks.yaml'
    - 'Resources/Utilities/CreateLoopbackPort/*'
    - 'Resources/Scripts/Setup MIDI ports.ps1'

schedules:
- cron: '0 0,3,6 * * *'
  displayName: Run benchmarks
  branches:
    include:
    - develop
  always: 'true'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  version: '5.2.0'

name: $(TeamProject)_$(SourceBranchName)_RunBenchmarks_$(ApiArea)_$(version)$(Rev:.r)

steps:
- task: PowerShell@2
  displayName: Create directories for results
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Path "$(Build.ArtifactStagingDirectory)" -Name "PreviousResults" -ItemType "Directory"
      New-Item -Path "$(Build.ArtifactStagingDirectory)" -Name "CurrentResults" -ItemType "Directory"

- task: DownloadPipelineArtifact@2
  displayName: Download previous results
  inputs:
    buildType: 'specific'
    project: 'd286d31e-d5f6-443f-b126-d81074c91872'
    definition: '$(System.DefinitionId)'
    buildVersionToDownload: 'latest'
    artifactName: 'BenchmarksResults'
    targetPath: $(Build.ArtifactStagingDirectory)\PreviousResults

- task: NugetToolInstaller@1
  displayName: Install latest NuGet tool

- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages
  inputs:
    command: restore

- task: DotNetCoreCLI@2
  displayName: Build DryWetMidi and DryWetMidi.Tests.Common
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration) --framework netstandard2.0'
    projects: |
      DryWetMidi/Melanchall.DryWetMidi.csproj
      DryWetMidi.Tests.Common/Melanchall.DryWetMidi.Tests.Common.csproj

- task: DotNetCoreCLI@2
  displayName: Build DryWetMidi.Benchmarks
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration) --framework netcoreapp2.1'
    projects: |
      DryWetMidi.Benchmarks/Melanchall.DryWetMidi.Benchmarks.csproj
    
- task: PowerShell@2
  displayName: Setup MIDI ports for devices API benchmarks
  condition: "contains(variables['ApiArea'], 'Devices')"
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)/Resources/Scripts/Setup MIDI ports.ps1'

- task: DotNetCoreCLI@2
  displayName: Run benchmarks
  continueOnError: true
  inputs:
    command: 'test'
    projects: 'DryWetMidi.Benchmarks/Melanchall.DryWetMidi.Benchmarks.csproj'
    arguments: '--blame --no-build --configuration $(buildConfiguration) --filter (FullyQualifiedName~.$(ApiArea)) --framework netcoreapp2.1 --verbosity normal'

- task: CopyFiles@2
  displayName: Copy results
  inputs:
    contents: '**/BenchmarkDotNet.Artifacts/**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)\CurrentResults

- task: PowerShell@2
  displayName: Print results
  inputs:
    targetType: 'inline'
    script: |
      $previousDirectory = "$(Build.ArtifactStagingDirectory)\PreviousResults"
      $currentDirectory = "$(Build.ArtifactStagingDirectory)\CurrentResults"
      $currentFiles = Get-ChildItem -Path "$currentDirectory" -Recurse -Name -Include *.json
      
      foreach ($fileName in $currentFiles)
      {
        $fileNameWithoutExtension = [System.IO.Path]::GetFileNameWithoutExtension($fileName)
        $className = $fileNameWithoutExtension.Split('.')[-1].Replace("+", " -> ") -Replace "\-report\-brief",""

        Write-Host "========================================"
        Write-Host $className
        
        $currentJson = Get-Content "$currentDirectory\$fileName" | Out-String | ConvertFrom-Json

        For ($i=0; $i -lt $currentJson.Benchmarks.Length; $i++)
        {
          Write-Host "----------------------------------------"
          Write-Host $currentJson.Benchmarks[$i].MethodTitle
  
          $currentMean = [math]::Round($currentJson.Benchmarks[$i].Statistics.Mean / 1000000, 3)
          
          $previousFileExists = Test-Path -Path "$previousDirectory\$fileName"
          If (-Not $previousFileExists)
          {
            Write-Host "    $currentMean"
            continue
          }
          
          $previousJson = Get-Content "$previousDirectory\$fileName" | Out-String | ConvertFrom-Json
          $previousMean = [math]::Round($previousJson.Benchmarks[$i].Statistics.Mean / 1000000, 3)
          
          $delta = $currentMean - $previousMean
          
          $resultString = "    $previousMean ms -> $currentMean ms | $delta ms"
          If ($currentMean -le $previousMean)
          {
            Write-Host $resultString
          }
          Else
          {
            Write-Host "##vso[task.logissue type=warning]$resultString"
          }
        }
      }

- task: PublishPipelineArtifact@1
  displayName: Publish results
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)\CurrentResults
    artifact: BenchmarksResults

- task: PowerShell@2
  displayName: Export results to InfluxDB Cloud
  inputs:
    targetType: 'inline'
    script: |
      $location = Get-Location
      Write-Host "Building ExportBenchmarksResults..."
      dotnet publish "Resources/Utilities/ExportBenchmarksResults/ExportBenchmarksResults.sln" -c Release -r win10-x64 -o "$location/ExportBenchmarksResults"
      Write-Host "Built."
      
      Write-Host "Exporting benchmarks results..."
      $url = "$(InfluxCloudUrl)"
      $token = "$(InfluxCloudToken)"
      $organization = "$(InfluxCloudOrganization)"
      $bucket = "$(InfluxCloudBucket)"
      $measurement = "$(InfluxCloudMeasurement)"
      $resultsFolder = "$(Build.ArtifactStagingDirectory)\CurrentResults"
      $branch = "$(Build.SourceBranchName)"
      Start-Process "ExportBenchmarksResults/ExportBenchmarksResults.exe" -ArgumentList """$url"" ""$token"" ""$organization"" ""$bucket"" ""$measurement"" ""$resultsFolder"" ""$branch""" -Wait -NoNewWindow
      Write-Host "Exported."